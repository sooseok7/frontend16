{"ast":null,"code":"import axios from 'axios';\n\nclass AuthenticationService {\n  // send username, password to the SERVER\n  executeJwtAuthenticationService(username, password) {\n    return axios.post('/authenticate', {\n      username,\n      password\n    });\n  }\n\n  executeHelloService() {\n    //console.log(\"===executeHelloService===\")\n    return axios.get('/hello');\n  }\n\n  registerSuccessfulLoginForJwt(username, token) {\n    //console.log(\"===registerSuccessfulLoginForJwt===\")\n    localStorage.setItem('token', token);\n    localStorage.setItem('authenticatedUser', username); // sessionStorage.setItem('authenticatedUser', username)\n    //this.setupAxiosInterceptors(this.createJWTToken(token))\n\n    this.setupAxiosInterceptors();\n  }\n\n  createJWTToken(token) {\n    return 'Bearer ' + token;\n  }\n\n  setupAxiosInterceptors() {\n    axios.interceptors.request.use(config => {\n      const token = localStorage.getItem('token');\n\n      if (token) {\n        config.headers['Authorization'] = 'Bearer ' + token;\n      } // config.headers['Content-Type'] = 'application/json';\n\n\n      return config;\n    }, error => {\n      Promise.reject(error);\n    });\n  }\n\n  logout() {\n    //sessionStorage.removeItem('authenticatedUser');\n    localStorage.removeItem(\"authenticatedUser\");\n    localStorage.removeItem(\"token\");\n  }\n\n  isUserLoggedIn() {\n    const token = localStorage.getItem('token');\n\n    if (token) {\n      return true;\n    }\n\n    return false;\n  }\n\n  getLoggedInUserName() {\n    //let user = sessionStorage.getItem('authenticatedUser')\n    let user = localStorage.getItem('authenticatedUser');\n    if (user === null) return '';\n    return user;\n  }\n\n}\n\nexport default new AuthenticationService();","map":{"version":3,"sources":["C:/frontend16/src/jwtlogin/AuthenticationService.js"],"names":["axios","AuthenticationService","executeJwtAuthenticationService","username","password","post","executeHelloService","get","registerSuccessfulLoginForJwt","token","localStorage","setItem","setupAxiosInterceptors","createJWTToken","interceptors","request","use","config","getItem","headers","error","Promise","reject","logout","removeItem","isUserLoggedIn","getLoggedInUserName","user"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,MAAMC,qBAAN,CAA4B;AACxB;AACAC,EAAAA,+BAA+B,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAChD,WAAOJ,KAAK,CAACK,IAAN,CAAW,eAAX,EAA4B;AAC/BF,MAAAA,QAD+B;AAE/BC,MAAAA;AAF+B,KAA5B,CAAP;AAIH;;AAEDE,EAAAA,mBAAmB,GAAG;AAClB;AACA,WAAON,KAAK,CAACO,GAAN,CAAU,QAAV,CAAP;AACH;;AAEDC,EAAAA,6BAA6B,CAACL,QAAD,EAAWM,KAAX,EAAkB;AAC3C;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BF,KAA9B;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,mBAArB,EAA0CR,QAA1C,EAH2C,CAI3C;AACA;;AACA,SAAKS,sBAAL;AACH;;AAEDC,EAAAA,cAAc,CAACJ,KAAD,EAAQ;AAClB,WAAO,YAAYA,KAAnB;AACH;;AAEDG,EAAAA,sBAAsB,GAAG;AACrBZ,IAAAA,KAAK,CAACc,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CACIC,MAAM,IAAI;AACN,YAAMR,KAAK,GAAGC,YAAY,CAACQ,OAAb,CAAqB,OAArB,CAAd;;AACA,UAAIT,KAAJ,EAAW;AACPQ,QAAAA,MAAM,CAACE,OAAP,CAAe,eAAf,IAAkC,YAAYV,KAA9C;AACH,OAJK,CAKN;;;AACA,aAAOQ,MAAP;AACH,KARL,EASIG,KAAK,IAAI;AACLC,MAAAA,OAAO,CAACC,MAAR,CAAeF,KAAf;AACH,KAXL;AAYH;;AAEDG,EAAAA,MAAM,GAAG;AACL;AACAb,IAAAA,YAAY,CAACc,UAAb,CAAwB,mBAAxB;AACAd,IAAAA,YAAY,CAACc,UAAb,CAAwB,OAAxB;AACH;;AAEDC,EAAAA,cAAc,GAAG;AACb,UAAMhB,KAAK,GAAGC,YAAY,CAACQ,OAAb,CAAqB,OAArB,CAAd;;AACA,QAAIT,KAAJ,EAAW;AACP,aAAO,IAAP;AACH;;AAED,WAAO,KAAP;AACH;;AAEDiB,EAAAA,mBAAmB,GAAG;AAClB;AACA,QAAIC,IAAI,GAAGjB,YAAY,CAACQ,OAAb,CAAqB,mBAArB,CAAX;AACA,QAAGS,IAAI,KAAG,IAAV,EAAgB,OAAO,EAAP;AAChB,WAAOA,IAAP;AACH;;AA9DuB;;AAiE5B,eAAe,IAAI1B,qBAAJ,EAAf","sourcesContent":["import axios from 'axios'\r\n\r\nclass AuthenticationService {\r\n    // send username, password to the SERVER\r\n    executeJwtAuthenticationService(username, password) {\r\n        return axios.post('/authenticate', {\r\n            username,\r\n            password\r\n        })\r\n    }\r\n\r\n    executeHelloService() {\r\n        //console.log(\"===executeHelloService===\")\r\n        return axios.get('/hello');        \r\n    }\r\n\r\n    registerSuccessfulLoginForJwt(username, token) {\r\n        //console.log(\"===registerSuccessfulLoginForJwt===\")\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('authenticatedUser', username);\r\n        // sessionStorage.setItem('authenticatedUser', username)\r\n        //this.setupAxiosInterceptors(this.createJWTToken(token))\r\n        this.setupAxiosInterceptors();\r\n    }\r\n\r\n    createJWTToken(token) {\r\n        return 'Bearer ' + token\r\n    }\r\n\r\n    setupAxiosInterceptors() {\r\n        axios.interceptors.request.use(\r\n            config => {\r\n                const token = localStorage.getItem('token');\r\n                if (token) {\r\n                    config.headers['Authorization'] = 'Bearer ' + token;\r\n                }\r\n                // config.headers['Content-Type'] = 'application/json';\r\n                return config;\r\n            },\r\n            error => {\r\n                Promise.reject(error)\r\n            });\r\n    }\r\n\r\n    logout() {\r\n        //sessionStorage.removeItem('authenticatedUser');\r\n        localStorage.removeItem(\"authenticatedUser\");\r\n        localStorage.removeItem(\"token\");\r\n    }\r\n\r\n    isUserLoggedIn() {\r\n        const token = localStorage.getItem('token');\r\n        if (token) {\r\n            return true;\r\n        }\r\n        \r\n        return false;\r\n    }\r\n\r\n    getLoggedInUserName() {\r\n        //let user = sessionStorage.getItem('authenticatedUser')\r\n        let user = localStorage.getItem('authenticatedUser');\r\n        if(user===null) return '';\r\n        return user;\r\n    }\r\n}\r\n\r\nexport default new AuthenticationService()"]},"metadata":{},"sourceType":"module"}